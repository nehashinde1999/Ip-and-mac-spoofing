import os
import random
import re
import subprocess

def generate_random_mac():
    mac = [0x00, 0x16, 0x3E,
           random.randint(0x00, 0x7F),
           random.randint(0x00, 0xFF),
           random.randint(0x00, 0xFF)]
    return ':'.join(map(lambda x: f"{x:02x}", mac))
def get_current_mac(interface):
    try:
        ifconfig_result = subprocess.check_output(["ifconfig", interface]).decode('utf-8')
        mac_address_search = re.search(r"(\w\w:\w\w:\w\w:\w\w:\w\w:\w\w)", ifconfig_result)
        if mac_address_search:
            return mac_address_search.group(0)
        else:
            return None
    except subprocess.CalledProcessError:
        print(f"Failed to get MAC address for interface {interface}.")
        return None
def change_mac(interface, new_mac):
    print(f"Changing MAC address for {interface} to {new_mac}")
    os.system(f"sudo ifconfig {interface} down")       # Bring the interface down
    os.system(f"sudo ifconfig {interface} hw ether {new_mac}")  # Change MAC address
    os.system(f"sudo ifconfig {interface} up")         # Bring the interface back up
def mac_spoof(interface):
    current_mac = get_current_mac(interface)
    if current_mac:
        print(f"Current MAC address: {current_mac}")
        new_mac = generate_random_mac()
        change_mac(interface, new_mac)
        updated_mac = get_current_mac(interface)
        if updated_mac == new_mac:
            print(f"MAC address changed successfully to {updated_mac}")
        else:
            print("Failed to change MAC address.")
    else:
        print("Could not retrieve the current MAC address.")
interface = "eth0"  # Change this to the correct interface on your system
mac_spoof(interface)
